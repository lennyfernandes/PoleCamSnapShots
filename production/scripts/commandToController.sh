SERIAL_PORT_NO='ttyS3'
SERIAL_PORT_PATH="/dev/$SERIAL_PORT_NO"
SERIAL_PORT_DATA_DUMP="/tmp/SERIAL_PORT_READINGS_$SERIAL_PORT_NO.dat"
VOLTAGE_CURRENT_READINGS="/home/qdnet/production/serialPortDump/VOLTAGE_CURRENT_READINGS_$SERIAL_PORT_NO.dat"

func_command2Controller() {
    local COMMAND_TO_CONTROLLER=$1
        
    echo "$(date) : COMMAND_TO_CONTROLLER : $COMMAND_TO_CONTROLLER" >> $ICT_LOG
    
    CHECK_EXISTS_SERIAL_PORT_NO=$(dmesg | grep "$SERIAL_PORT_NO")
    if [ "$CHECK_EXISTS_SERIAL_PORT_NO" = "" ] ; then
        echo "$(date) : SERIAL PORT - $SERIAL_PORT_PATH : DOES NOT EXISTS !!!" >> $ICT_LOG
        return
    fi
    stty -F $SERIAL_PORT_PATH 9600 raw -echo #CONFIGURE SERIAL PORT
    exec 3<$SERIAL_PORT_PATH # REDIRECT SERIAL OUTPUT TO FD 3
    cat <&3 > $2 & # REDIRECT SERIAL OUTPUT TO FILE
    PID=$! # SAVE PID TO KILL CAT
    echo "$COMMAND_TO_CONTROLLER" > $SERIAL_PORT_PATH #SEND COMMAND STRING TO SERIAL PORT
    sleep 3s #WAIT FOR RESPONSE
    kill $PID #KILL CAT PROCESS
    wait $PID 2>/dev/null #SUPRESS "Terminated" output
    exec 3<&- #FREE FD 3
    CONTROLLER_RESPONSE=$(cat $2) #DUMP CAPTURED DATA
    echo "$(date) : CONTROLLER_RESPONSE : $CONTROLLER_RESPONSE" >> $ICT_LOG
}
